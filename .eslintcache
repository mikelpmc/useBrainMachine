[{"D:\\dev\\use-brain-machine\\src\\index.js":"1","D:\\dev\\use-brain-machine\\src\\App.js":"2","D:\\dev\\use-brain-machine\\src\\useBrainMachine\\index.js":"3","D:\\dev\\use-brain-machine\\src\\useBrainMachine\\useBrainMachine.js":"4","D:\\dev\\use-brain-machine\\src\\examples\\fetch-users\\index.js":"5","D:\\dev\\use-brain-machine\\src\\examples\\fetch-users\\fetchUsers.js":"6","D:\\dev\\use-brain-machine\\src\\examples\\index.js":"7","D:\\dev\\use-brain-machine\\src\\examples\\confirmation-flow\\index.js":"8","D:\\dev\\use-brain-machine\\src\\examples\\confirmation-flow\\confirmationFlow.js":"9"},{"size":335,"mtime":1607365003786,"results":"10","hashOfConfig":"11"},{"size":1054,"mtime":1607366038038,"results":"12","hashOfConfig":"11"},{"size":81,"mtime":1607364438492,"results":"13","hashOfConfig":"11"},{"size":1941,"mtime":1607364387707,"results":"14","hashOfConfig":"11"},{"size":70,"mtime":1607365376277,"results":"15","hashOfConfig":"11"},{"size":2711,"mtime":1607365085344,"results":"16","hashOfConfig":"11"},{"size":138,"mtime":1607365409408,"results":"17","hashOfConfig":"11"},{"size":88,"mtime":1607365348314,"results":"18","hashOfConfig":"11"},{"size":2354,"mtime":1607366372565,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nb86k4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\dev\\use-brain-machine\\src\\index.js",[],["40","41"],"D:\\dev\\use-brain-machine\\src\\App.js",[],"D:\\dev\\use-brain-machine\\src\\useBrainMachine\\index.js",[],"D:\\dev\\use-brain-machine\\src\\useBrainMachine\\useBrainMachine.js",["42"],"import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useBrainMachine = (config) => {\r\n  const [state, setState] = useState(config.initial);\r\n  const [data, setData] = useState(config.data);\r\n\r\n  const prevState = useRef(state);\r\n\r\n  const handleSend = (event) => {\r\n    const currentStateNode = config.states[state];\r\n    if (!currentStateNode) return;\r\n\r\n    const stateNodeEvent =\r\n      currentStateNode &&\r\n      currentStateNode.on &&\r\n      currentStateNode.on[event.type];\r\n    if (!stateNodeEvent) return;\r\n\r\n    const nextState = stateNodeEvent.target;\r\n    setState(nextState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const service = config.states[machine.state].service;\r\n\r\n    if (service) {\r\n      const handleService = async (state) => {\r\n        const callState = state;\r\n        try {\r\n          if (service.src) {\r\n            const data = await service.src();\r\n\r\n            if (prevState.current === callState) {\r\n              const nextState = service.onDone && service.onDone.target;\r\n              if (nextState) setState(nextState);\r\n\r\n              service.onDone &&\r\n                service.onDone.actions &&\r\n                service.onDone.actions({\r\n                  response: data,\r\n                  data: machine.data,\r\n                  setData,\r\n                });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          const nextState = service.onError && service.onError.target;\r\n          if (nextState) setState(nextState);\r\n\r\n          service.onError &&\r\n            service.onError.actions &&\r\n            service.onError.actions({\r\n              response: error,\r\n              data: machine.data,\r\n              setData,\r\n            });\r\n        }\r\n      };\r\n\r\n      handleService(state);\r\n    }\r\n\r\n    prevState.current = state;\r\n  }, [state]);\r\n\r\n  const machine = {\r\n    state,\r\n    data,\r\n    send: handleSend,\r\n  };\r\n\r\n  return machine;\r\n};\r\n\r\nexport default useBrainMachine;\r\n","D:\\dev\\use-brain-machine\\src\\examples\\fetch-users\\index.js",[],"D:\\dev\\use-brain-machine\\src\\examples\\fetch-users\\fetchUsers.js",[],"D:\\dev\\use-brain-machine\\src\\examples\\index.js",[],"D:\\dev\\use-brain-machine\\src\\examples\\confirmation-flow\\index.js",[],"D:\\dev\\use-brain-machine\\src\\examples\\confirmation-flow\\confirmationFlow.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":64,"column":6,"nodeType":"49","endLine":64,"endColumn":13,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'config.states', 'machine.data', and 'machine.state'. Either include them or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [config.states, machine.data, machine.state, state]",{"range":"56","text":"57"},[1795,1802],"[config.states, machine.data, machine.state, state]"]